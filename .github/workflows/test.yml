name: VoiceApp Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.9'

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --tb=short --cov=. --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unit-tests
        name: unit-tests-coverage

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      # Redis service for testing
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Set up Firebase Emulator
      run: |
        # Install Node.js for Firebase CLI
        curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
        sudo apt-get install -y nodejs
        
        # Install Firebase CLI
        npm install -g firebase-tools
        
        # Initialize Firebase emulators
        firebase emulators:start --only firestore,auth --project demo-test --detach
        
        # Wait for emulators to start
        sleep 10
    
    - name: Configure test environment
      run: |
        # Set environment variables for testing
        echo "FIREBASE_AUTH_EMULATOR_HOST=localhost:9099" >> $GITHUB_ENV
        echo "FIRESTORE_EMULATOR_HOST=localhost:8080" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=test_key_for_ci" >> $GITHUB_ENV
        echo "LIVEKIT_API_KEY=test_livekit_key" >> $GITHUB_ENV
        echo "LIVEKIT_API_SECRET=test_livekit_secret" >> $GITHUB_ENV
        echo "LIVEKIT_URL=wss://test.livekit.cloud" >> $GITHUB_ENV
    
    - name: Start VoiceApp server
      run: |
        python main.py &
        SERVER_PID=$!
        echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
        
        # Wait for server to start
        timeout 30 bash -c 'until curl -f http://localhost:8000/; do sleep 1; done'
      
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --tb=short
    
    - name: Stop server
      if: always()
      run: |
        if [ ! -z "$SERVER_PID" ]; then
          kill $SERVER_PID || true
        fi
    
    - name: Stop Firebase Emulator
      if: always()
      run: |
        firebase emulators:stop || true

  contract-tests:
    name: Contract Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Set up Firebase Emulator
      run: |
        curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
        sudo apt-get install -y nodejs
        npm install -g firebase-tools
        firebase emulators:start --only firestore,auth --project demo-test --detach
        sleep 10
    
    - name: Configure test environment
      run: |
        echo "FIREBASE_AUTH_EMULATOR_HOST=localhost:9099" >> $GITHUB_ENV
        echo "FIRESTORE_EMULATOR_HOST=localhost:8080" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=test_key_for_ci" >> $GITHUB_ENV
        echo "LIVEKIT_API_KEY=test_livekit_key" >> $GITHUB_ENV
        echo "LIVEKIT_API_SECRET=test_livekit_secret" >> $GITHUB_ENV
        echo "LIVEKIT_URL=wss://test.livekit.cloud" >> $GITHUB_ENV
    
    - name: Start VoiceApp server
      run: |
        python main.py &
        SERVER_PID=$!
        echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
        timeout 30 bash -c 'until curl -f http://localhost:8000/; do sleep 1; done'
    
    - name: Run contract tests
      run: |
        pytest tests/contract/ -v --tb=short
    
    - name: Run schemathesis tests
      run: |
        # Run schemathesis command line tool
        schemathesis run http://localhost:8000/openapi.json \
          --checks all \
          --max-examples=10 \
          --hypothesis-deadline=5000 \
          --exclude-path="/api/auth/*" \
          --exclude-path="/api/rooms/*" \
          --exclude-path="/api/matching/*" \
          --exclude-path="/api/friends/*" \
          --exclude-path="/api/recordings/*"
    
    - name: Cleanup
      if: always()
      run: |
        if [ ! -z "$SERVER_PID" ]; then
          kill $SERVER_PID || true
        fi
        firebase emulators:stop || true

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt
    
    - name: Run Black (code formatting)
      run: |
        black --check --diff .
    
    - name: Run isort (import sorting)
      run: |
        isort --check-only --diff .
    
    - name: Run flake8 (linting)
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run mypy (type checking)
      run: |
        mypy . --ignore-missing-imports --no-strict-optional

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Run safety (dependency vulnerability scan)
      run: |
        safety check --json || true
    
    - name: Run bandit (security linting)
      run: |
        bandit -r . -f json || true

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, contract-tests, code-quality, security-scan]
    if: always()
    
    steps:
    - name: Test Results Summary
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Unit Tests | ${{ needs.unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Contract Tests | ${{ needs.contract-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.code-quality.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        
        # Set overall status
        if [[ "${{ needs.unit-tests.result }}" == "success" && 
              "${{ needs.integration-tests.result }}" == "success" && 
              "${{ needs.contract-tests.result }}" == "success" ]]; then
          echo "✅ All critical tests passed!" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Some critical tests failed!" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi 