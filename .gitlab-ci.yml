# VoiceApp GitLab CI/CD Pipeline
# ==============================

stages:
  - test
  - build
  - docs
  - deploy

variables:
  PYTHON_VERSION: "3.9"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"

# Default image
image: python:${PYTHON_VERSION}

# Cache pip dependencies
cache:
  paths:
    - .cache/pip
    - venv/

before_script:
  - python -V
  - pip install virtualenv
  - virtualenv venv
  - source venv/bin/activate
  - pip install -r requirements.txt
  - pip install aiohttp websockets firebase-admin requests

# Job 1: Smoke Tests
smoke-tests:
  stage: test
  services:
    - redis:7-alpine
  variables:
    REDIS_URL: "redis://redis:6379"
  script:
    - echo "🔥 Running VoiceApp Smoke Tests"
    - python main.py &
    - export SERVER_PID=$!
    - sleep 10  # Wait for server to start
    - python scripts/smoke_test.py --base-url http://localhost:8000 --verbose
    - kill $SERVER_PID
  artifacts:
    reports:
      junit: test-results.xml
    paths:
      - test-results/
    expire_in: 1 week
  only:
    - main
    - develop
    - merge_requests

# Job 2: Documentation Generation
generate-docs:
  stage: docs
  services:
    - redis:7-alpine
  variables:
    REDIS_URL: "redis://redis:6379"
  script:
    - echo "📚 Generating API Documentation"
    - python main.py &
    - export SERVER_PID=$!
    - sleep 10
    - python scripts/generate_docs.py --base-url http://localhost:8000 --output-dir docs
    - kill $SERVER_PID
  artifacts:
    paths:
      - docs/
    expire_in: 1 month
  only:
    - main
    - develop

# Job 3: Docker Build and Test
docker-test:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker info
    - docker-compose --version
  script:
    - echo "🐳 Running Docker-based tests"
    - chmod +x scripts/docker_test.sh
    - ./scripts/docker_test.sh --no-cleanup
  artifacts:
    paths:
      - docs/
      - test-results/
    expire_in: 1 week
  only:
    - main
    - develop

# Job 4: Security Scan
security-scan:
  stage: test
  script:
    - pip install bandit safety
    - echo "🔒 Running security scans"
    - bandit -r . -f json -o bandit-report.json || true
    - safety check --json --output safety-report.json || true
  artifacts:
    paths:
      - bandit-report.json
      - safety-report.json
    expire_in: 1 week
  allow_failure: true
  only:
    - main
    - develop

# Job 5: Deploy Documentation (Pages)
pages:
  stage: deploy
  dependencies:
    - generate-docs
  script:
    - mkdir public
    - cp -r docs/* public/
  artifacts:
    paths:
      - public
  only:
    - main

# Job 6: Performance Testing (scheduled)
performance-test:
  stage: test
  script:
    - apt-get update && apt-get install -y apache2-utils
    - python main.py &
    - export SERVER_PID=$!
    - sleep 15
    - echo "⚡ Running performance tests"
    - ab -n 100 -c 10 http://localhost:8000/ > performance-results.txt
    - ab -n 50 -c 5 http://localhost:8000/api/ai-host/health >> performance-results.txt
    - kill $SERVER_PID
  artifacts:
    paths:
      - performance-results.txt
    expire_in: 1 week
  only:
    - schedules
    - main

# Job 7: Integration Tests
integration-tests:
  stage: test
  services:
    - redis:7-alpine
    - postgres:13
  variables:
    REDIS_URL: "redis://redis:6379"
    POSTGRES_DB: voiceapp_test
    POSTGRES_USER: test
    POSTGRES_PASSWORD: test
    DATABASE_URL: "postgresql://test:test@postgres:5432/voiceapp_test"
  script:
    - echo "🔗 Running integration tests"
    - python main.py &
    - export SERVER_PID=$!
    - sleep 10
    - python -m pytest tests/integration/ -v --tb=short
    - kill $SERVER_PID
  artifacts:
    reports:
      junit: integration-test-results.xml
    paths:
      - integration-test-results/
    expire_in: 1 week
  only:
    - main
    - develop
  allow_failure: true 